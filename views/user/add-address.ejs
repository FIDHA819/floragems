<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create User Address</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEJdXy8s4c+3fpD4o1v6WvWphgLOhz7xwfh4Cqrb9HRAK0MSTP0K1eAChDbdP" crossorigin="anonymous">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f7fa;
            margin: 0;
            padding: 0;
        }

        .container {
            background-color: #ffffff;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            margin: 50px auto;
        }

        h3 {
            color: #2c3e50;
            margin-bottom: 40px;
            text-align: center;
            font-weight: bold;
        }

        .form-control {
            border-radius: 8px;
            border: 1px solid #dfe4ea;
            padding: 15px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }

        .form-group label {
            font-weight: 600;
            font-size: 14px;
            color: #7f8c8d;
            margin-bottom: 8px;
        }

        .btn-primary {
            background-color: #3498db;
            border: none;
            padding: 12px 20px;
            color: white;
            font-size: 16px;
            font-weight: 600;
            border-radius: 8px;
            width: 100%;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
        }

        .row {
            margin-bottom: 20px;
        }

        .row .form-group {
            margin-bottom: 15px;
        }

        .text-danger {
            color: red;
            font-size: 12px;
            margin-top: 5px;
        }

        .form-control.error {
            border-color: #e74c3c;
        }

        .form-group.error input {
            border-color: #e74c3c;
        }

        .form-group.error .text-danger {
            display: block;
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }

            h3 {
                font-size: 24px;
            }

            .btn-primary {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h3>Create User Address</h3>
        <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3">
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="addressType">Address Type:</label>
                    <input type="text" class="form-control" id="addressType" name="addressType" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="name">Name:</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="city">City:</label>
                    <input type="text" class="form-control" id="city" name="city" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="landMark">Landmark:</label>
                    <input type="text" class="form-control" id="landMark" name="landMark" required>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="state">State:</label>
                    <input type="text" class="form-control" id="state" name="state" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="pincode">Pincode:</label>
                    <input type="number" class="form-control" id="pincode" name="pincode" required>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="phone">Phone:</label>
                    <input type="number" class="form-control" id="phone" name="phone" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="altPhone">Alternate Phone:</label>
                    <input type="number" class="form-control" id="altPhone" name="altPhone" required>
                </div>
            </div>
            <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.getElementById('addressForm').addEventListener('submit', function(event) {
            if (!validateForm()) {
                event.preventDefault();
            }
        });

        function validateForm() {
            let isValid = true;
            const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
            requiredFields.forEach(function(field) {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();
                const errorElement = document.getElementById(field + '-error');

                if (inputValue === "") {
                    if (!errorElement) {
                        const errorMessage = "This field is required.";
                        const errorDiv = document.createElement('div');
                        errorDiv.className = "text-danger";
                        errorDiv.textContent = errorMessage;
                        errorDiv.id = field + '-error';
                        input.parentNode.appendChild(errorDiv);
                    }
                    isValid = false;
                } else {
                    if (errorElement) {
                        errorElement.remove();
                    }
                }
            });

            const addressType = document.getElementById('addressType').value;
            const name = document.getElementById('name').value;
            const city = document.getElementById('city').value;
            const landMark = document.getElementById('landMark').value;
            const state = document.getElementById('state').value;
            const pincode = document.getElementById('pincode').value;
            const phone = document.getElementById('phone').value;
            const altPhone = document.getElementById('altPhone').value;
            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (!namePattern.test(name)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Name should contain alphabets only.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!namePattern.test(city)) {
                Swal.fire({
                    title: 'Error',
                    text: 'City should contain alphabets only.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!namePattern.test(landMark)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Landmark should contain alphabets only.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!namePattern.test(state)) {
                Swal.fire({
                    title: 'Error',
                    text: 'State should contain alphabets only.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!pincodePattern.test(pincode)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Pincode should be a 6-digit number.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!phonePattern.test(phone)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Phone number should be a 10-digit number.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (!phonePattern.test(altPhone)) {
                Swal.fire({
                    title: 'Error',
                    text: 'Alternate phone number should be a 10-digit number.',
                    icon: 'error'
                });
                isValid = false;
            }
            if (phone === altPhone) {
                Swal.fire({
                    title: 'Error',
                    text: 'Phone number and alternate phone number should be different.',
                    icon: 'error'
                });
                isValid = false;
            }
            return isValid;
        }
    </script>
</body>
</html>
